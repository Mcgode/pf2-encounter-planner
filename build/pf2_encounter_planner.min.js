!(function(e, t) {
"object" == typeof exports && "undefined" != typeof module
? t(exports)
: "function" == typeof define && define.amd
? define(["exports"], t)
: t((e.PF2EncounterPlanner = {}));
})(this, function(e) {
"use strict";
class t {
constructor(e) {
(this.name = e), (this.id = null);
}
registerToSession(e) {
do {
this.id = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
} while (e.isIdUsed(this.id));
}
exportToJSON() {
return {name: this.name, id: this.id};
}
static importFromJSON(e) {
let n = new t(e.name);
return (n.id = e.id), n;
}
}
class n {
constructor(e = "Default", t = null) {
(this.name = e),
(this.id = null != t ? t : n.getIdFriendlyName(e)),
(this.elements = []);
}
static getIdFriendlyName(e) {
return (
"encounter-" +
e
.toLowerCase()
.split(/[^a-z0-9]/)
.filter(e => e.length > 0)
.join("-")
);
}
exportToJSON() {
let e = {name: this.name, id: this.id, elements: []};
for (let t of this.elements) e.elements.push(t.exportToJSON());
return e;
}
static importFromJSON(e) {
let r = new n(e.name, e.id);
for (let n of e.elements) r.elements.push(t.importFromJSON(n));
return r;
}
}
class r {
constructor(e = "Default", t = {}) {
(this.name = e),
(this.params = Object.assign({autoLevelUp: !1}, t)),
(this.encounters = []);
}
addEncounter(e) {
let t = n.getIdFriendlyName(e);
if (null != this.encounters.find(t => t.name === e)) return null;
if (null != this.encounters.find(e => e.id === t)) {
let e = 0;
for (; null != this.encounters.find(n => n.id === `${t}${e}`); ) e++;
t = `${t}${e}`;
}
let r = new n(e, t);
return this.encounters.push(r), r;
}
registerElement(e, t) {
let n = this.encounters.find(t => t.name === e);
return null != n && (n.elements.push(t), t.registerToSession(this)), null != n;
}
isIdUsed(e) {
for (let t of this.encounters)
for (let n of t.elements) if (n.id === e) return !0;
return !1;
}
moveEncounterIndex(e, t) {
let n = this.encounters[e];
this.encounters.splice(e, 1), this.encounters.splice(t, 0, n);
}
renameEncounter(e, t) {
let n = this.encounters.find(t => t.name === e);
return (
null == this.encounters.find(e => e.name === t) &&
null != n &&
((n.name = t), !0)
);
}
removeEncounter(e) {
this.encounters.splice(
this.encounters.findIndex(t => t.id === e.id),
1
);
}
saveSession() {
window.localStorage.setItem("session:" + this.name, this.exportToJSON());
}
exportToJSON() {
let e = {params: this.params, name: this.name, encounters: []};
for (let t of this.encounters) e.encounters.push(t.exportToJSON());
return JSON.stringify(e);
}
static importFromJSON(e) {
let t = JSON.parse(e),
s = new r(t.name, t.params);
for (let e of t.encounters) s.encounters.push(n.importFromJSON(e));
return s;
}
}
const s = {
TRIVIAL: "trivial",
LOW: "low",
MODERATE: "moderate",
SEVERE: "severe",
EXTREME: "extreme",
IMPOSSIBLE: "impossible"
},
i = {
"-4": 10,
"-3": 15,
"-2": 20,
"-1": 30,
0: 40,
1: 60,
2: 80,
3: 120,
4: 160
},
o = {trivial: 40, low: 60, moderate: 80, severe: 120, extreme: 160};
(e.Session = r),
(e.EncounterElement = t),
(e.Encounter = n),
(e.FightElement = class extends t {
constructor(e) {
super(e), (this.creatures = []);
}
getEncounterXpPerPlayer(e = 1, t = 4) {
let n = 0;
for (let t of this.creatures) {
let r = t.level - e;
if (r > 4) return s.IMPOSSIBLE;
r >= -4 && (n += t.amount * i[r.toString()]);
}
return (n *= t / 4), n;
}
getEncounterRating(e = 1, t = 4) {
let n = this.getEncounterXpPerPlayer(e, t),
r = 200,
i = null;
for (let e in o) r > o[e] && o[e] >= n && ((i = e), (r = o[e]));
return null == i ? s.IMPOSSIBLE : i;
}
}),
(e.Creature = class {
constructor(e, t, n, r = null) {
(this.name = e),
(this.level = null == t ? 0 : t),
(this.amount = null == n ? 1 : n),
(this.link = r);
}
}),
(e.EncounterRating = s),
Object.defineProperty(e, "__esModule", {value: !0});
});
