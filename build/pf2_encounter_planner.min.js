!(function(e, t) {
"object" == typeof exports && "undefined" != typeof module
? t(exports)
: "function" == typeof define && define.amd
? define(["exports"], t)
: t((e.PF2EncounterPlanner = {}));
})(this, function(e) {
"use strict";
const t = {
FIGHT: "fight_component",
ACCOMPLISHMENT: "accomplishment_component",
HAZARD: "hazard_component",
CUSTOM: "custom_component"
};
class n {
constructor(e = 4, n = 1) {
(this.type = t.FIGHT),
(this.creatures = []),
(this.expectedPlayers = e),
(this.expectedLevel = n);
}
getEncounterXpPerPlayer() {
let e = 0;
for (let t of this.creatures)
if (null != t.level && null != t.amount) {
let n = t.level - this.expectedLevel;
if (n > 4) return null;
n >= -4 && (e += t.amount * s[n.toString()]);
}
return (e *= 4 / this.expectedPlayers), e;
}
getEncounterRating() {
let e = this.getEncounterXpPerPlayer();
if (null == e) return o.IMPOSSIBLE;
let t = 200,
n = null;
for (let r in i) t > i[r] && i[r] >= e && ((n = r), (t = i[r]));
return null == n ? o.IMPOSSIBLE : n;
}
exportToJSON() {
let e = {
type: t.FIGHT,
expectedLevel: this.expectedLevel,
expectedPlayers: this.expectedPlayers,
creatures: []
};
for (let t of this.creatures) e.creatures.push(t.exportToJSON());
return e;
}
static importFromJSON(e) {
let t = new n(e.expectedPlayers || 4, e.expectedLevel || 1);
for (let n of e.creatures) t.creatures.push(r.importFromJSON(n));
return t;
}
getNewCreatureId() {
let e,
t = !1;
do {
e = "creature-" + Math.floor(Number.MAX_SAFE_INTEGER * Math.random());
for (let n of this.creatures)
if (n.id === e) {
t = !0;
break;
}
} while (t);
return e;
}
copy() {
return n.importFromJSON(this.exportToJSON());
}
}
class r {
constructor(e, t, n, r = null, o = null) {
(this.name = e),
(this.level = t),
(this.amount = n),
(this.link = r),
(this.id = o);
}
exportToJSON() {
return {
name: this.name,
level: this.level,
amount: this.amount,
link: this.link,
id: this.id
};
}
static importFromJSON(e) {
return new r(e.name, e.level, e.amount, e.link, e.id);
}
}
const o = {
TRIVIAL: "trivial",
LOW: "low",
MODERATE: "moderate",
SEVERE: "severe",
EXTREME: "extreme",
IMPOSSIBLE: "impossible"
},
s = {
"-4": 10,
"-3": 15,
"-2": 20,
"-1": 30,
0: 40,
1: 60,
2: 80,
3: 120,
4: 160
},
i = {trivial: 40, low: 60, moderate: 80, severe: 120, extreme: 160};
class l {
constructor(e = a.MINOR) {
(this.type = t.ACCOMPLISHMENT), (this.level = e);
}
getEncounterXpPerPlayer() {
switch (this.level) {
case a.MAJOR:
return 80;
case a.MODERATE:
return 30;
default:
return 10;
}
}
exportToJSON() {
return {type: this.type, level: this.level};
}
static importFromJSON(e) {
return new l(e.level);
}
}
const a = {
MINOR: "Minor accomplishment",
MODERATE: "Moderate accomplishment",
MAJOR: "Major accomplishment"
};
class m {
constructor(e = 1) {
(this.type = t.HAZARD), (this.expectedLevel = e), (this.hazards = []);
}
getEncounterXpPerPlayer() {
let e = 0;
for (let t of this.hazards)
if (null != t.level && null != t.amount) {
let n = t.level - this.expectedLevel;
if (n > 4) return null;
n >= -4 && (e += t.amount * u[n.toString()] * (t.isComplex ? 5 : 1));
}
return e;
}
exportToJSON() {
let e = {type: t.HAZARD, hazards: [], expectedLevel: this.expectedLevel};
for (let t of this.hazards) e.hazards.push(t.exportToJSON());
return e;
}
static importFromJSON(e) {
let t = new m(e.expectedLevel || 1);
for (let n of e.hazards) t.hazards.push(p.importFromJSON(n));
return t;
}
getNewHazardId() {
let e,
t = !1;
do {
e = "hazard-" + Math.floor(Number.MAX_SAFE_INTEGER * Math.random());
for (let n of this.hazards)
if (n.id === e) {
t = !0;
break;
}
} while (t);
return e;
}
copy() {
return m.importFromJSON(this.exportToJSON());
}
}
class p {
constructor(e, t, n, r, o = null, s = null) {
(this.name = e),
(this.level = t),
(this.isComplex = n),
(this.amount = r),
(this.link = o),
(this.id = s);
}
exportToJSON() {
return {
name: this.name,
level: this.level,
isComplex: this.isComplex,
amount: this.amount,
link: this.link,
id: this.id
};
}
static importFromJSON(e) {
return new p(e.name, e.level, e.isComplex, e.amount, e.link, e.id);
}
}
const u = {
"-4": 2,
"-3": 3,
"-2": 4,
"-1": 6,
0: 8,
1: 12,
2: 16,
3: 24,
4: 32
};
class c {
constructor(e) {
(this.type = t.CUSTOM), (this.xp = e);
}
getEncounterXpPerPlayer() {
return this.xp;
}
exportToJSON() {
return {type: this.type, xp: this.xp};
}
static importFromJSON(e) {
return new c(e.xp);
}
}
class h {
constructor(e) {
(this.name = e), (this.id = null), (this.component = null);
}
registerToSession(e) {
do {
this.id = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
} while (e.isIdUsed(this.id));
}
exportToJSON() {
return {
name: this.name,
id: this.id,
component: null == this.component ? null : this.component.exportToJSON()
};
}
static importFromJSON(e) {
let r = new h(e.name);
if (((r.id = e.id), null != e.component))
switch (e.component.type) {
case t.FIGHT:
r.component = n.importFromJSON(e.component);
break;
case t.ACCOMPLISHMENT:
r.component = l.importFromJSON(e.component);
break;
case t.HAZARD:
r.component = m.importFromJSON(e.component);
break;
case t.CUSTOM:
r.component = c.importFromJSON(e.component);
}
return r;
}
}
class d {
constructor(e = "Default", t = null) {
(this.name = e),
(this.id = null != t ? t : d.getIdFriendlyName(e)),
(this.elements = []);
}
static getIdFriendlyName(e) {
return (
"encounter-" +
e
.toLowerCase()
.split(/[^a-z0-9]/)
.filter(e => e.length > 0)
.join("-")
);
}
moveElement(e, t) {
let n = this.elements[e];
this.elements.splice(e, 1), this.elements.splice(t, 0, n);
}
exportToJSON() {
let e = {name: this.name, id: this.id, elements: []};
for (let t of this.elements) e.elements.push(t.exportToJSON());
return e;
}
static importFromJSON(e) {
let t = new d(e.name, e.id);
for (let n of e.elements) t.elements.push(h.importFromJSON(n));
return t;
}
}
class f {
constructor(e = "Default", t = {}) {
(this.name = e),
(this.params = Object.assign(
{
autoLevelUp: !1,
players: [
{name: "Player 1", level: 1, xp: 0, id: "player-1"},
{name: "Player 2", level: 1, xp: 0, id: "player-2"},
{name: "Player 3", level: 1, xp: 0, id: "player-3"},
{name: "Player 4", level: 1, xp: 0, id: "player-4"}
]
},
t
)),
(this.encounters = []);
}
addEncounter(e) {
let t = d.getIdFriendlyName(e);
if (null != this.encounters.find(t => t.name === e)) return null;
if (null != this.encounters.find(e => e.id === t)) {
let e = 0;
for (; null != this.encounters.find(n => n.id === `${t}${e}`); ) e++;
t = `${t}${e}`;
}
let n = new d(e, t);
return this.encounters.push(n), this.saveSession(), n;
}
registerElement(e, t) {
let n = this.encounters.find(t => t.name === e);
return (
null != n && (t.registerToSession(this), n.elements.push(t)),
this.saveSession(),
null != n
);
}
isIdUsed(e) {
for (let t of this.encounters)
for (let n of t.elements) if (n.id === e) return !0;
return !1;
}
moveEncounterIndex(e, t) {
let n = this.encounters[e];
this.encounters.splice(e, 1), this.encounters.splice(t, 0, n);
}
renameEncounter(e, t) {
let n = this.encounters.find(t => t.name === e);
return (
null == this.encounters.find(e => e.name === t) &&
null != n &&
((n.name = t), this.saveSession(), !0)
);
}
removeEncounter(e) {
this.encounters.splice(
this.encounters.findIndex(t => t.id === e.id),
1
),
this.saveSession();
}
saveSession() {
window.localStorage.setItem("session:" + this.name, this.exportToJSON());
}
exportToJSON() {
let e = {params: this.params, name: this.name, encounters: []};
for (let t of this.encounters) e.encounters.push(t.exportToJSON());
return JSON.stringify(e);
}
addPlayer(e, t, n) {
let r, o;
do {
(r = "player-" + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)),
(o = null != this.params.players.find(e => e.id === r));
} while (o);
return this
.params.players[this.params.players.push({id: r, name: e, level: t, xp: n}) - 1];
}
getPlayerGroupLevel() {
return Math.min(...this.params.players.map(e => Math.floor(e.xp / 1e3) + 1));
}
static importFromJSON(e) {
let t = JSON.parse(e),
n = new f(t.name, t.params);
for (let e of t.encounters) n.encounters.push(d.importFromJSON(e));
return n;
}
static makeSession(e = "Default") {
let t = window.localStorage.getItem("session:" + e);
return null == t ? new f(e) : f.importFromJSON(t);
}
}
(e.Session = f),
(e.Encounter = d),
(e.EncounterElement = h),
(e.CustomComponent = c),
(e.FightComponent = n),
(e.Creature = r),
(e.EncounterRating = o),
(e.AccomplishmentComponent = l),
(e.AccomplishmentLevel = a),
(e.HazardComponent = m),
(e.Hazard = p),
(e.ComponentType = t),
(e.ComponentTypeName = {
fight_component: "Fight",
accomplishment_component: "Accomplishment",
hazard_component: "Hazard",
custom_component: "Custom"
}),
Object.defineProperty(e, "__esModule", {value: !0});
});
