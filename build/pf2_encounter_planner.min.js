!(function(e, t) {
"object" == typeof exports && "undefined" != typeof module
? t(exports)
: "function" == typeof define && define.amd
? define(["exports"], t)
: t((e.PF2EncounterPlanner = {}));
})(this, function(e) {
"use strict";
const t = {
FIGHT: "fight_component",
ACCOMPLISHMENT: "achievement_component",
HAZARD: "hazard_component",
CUSTOM: "custom_component"
};
class n {
constructor() {
(this.type = t.FIGHT), (this.creatures = []);
}
getEncounterXpPerPlayer(e = 1, t = 4) {
let n = 0;
for (let t of this.creatures) {
let o = t.level - e;
if (o > 4) return r.IMPOSSIBLE;
o >= -4 && (n += t.amount * s[o.toString()]);
}
return (n *= t / 4), n;
}
getEncounterRating(e = 1, t = 4) {
let n = this.getEncounterXpPerPlayer(e, t),
o = 200,
s = null;
for (let e in i) o > i[e] && i[e] >= n && ((s = e), (o = i[e]));
return null == s ? r.IMPOSSIBLE : s;
}
exportToJSON() {
let e = {type: t.FIGHT, creatures: []};
for (let t of this.creatures) e.creatures.push(t.exportToJSON());
return e;
}
static importFromJSON(e) {
let t = new n();
for (let n of e.creatures) t.creatures.push(o.importFromJSON(n));
return t;
}
}
class o {
constructor(e, t, n, o = null) {
(this.name = e),
(this.level = null == t ? 0 : t),
(this.amount = null == n ? 1 : n),
(this.link = o);
}
exportToJSON() {
return {
name: this.name,
level: this.level,
amount: this.amount,
link: this.link
};
}
static importFromJSON(e) {
return new o(e.name, e.leadingComments, e.amount, e.link);
}
}
const r = {
TRIVIAL: "trivial",
LOW: "low",
MODERATE: "moderate",
SEVERE: "severe",
EXTREME: "extreme",
IMPOSSIBLE: "impossible"
},
s = {
"-4": 10,
"-3": 15,
"-2": 20,
"-1": 30,
0: 40,
1: 60,
2: 80,
3: 120,
4: 160
},
i = {trivial: 40, low: 60, moderate: 80, severe: 120, extreme: 160};
class l {
constructor(e = m.MINOR) {
(this.type = t.ACCOMPLISHMENT), (this.level = e);
}
getEncounterXpPerPlayer(e = null, t = null) {
switch (this.level) {
case m.MAJOR:
return 80;
case m.MODERATE:
return 30;
default:
return 10;
}
}
exportToJSON() {
return {type: this.type, level: this.level};
}
static importFromJSON(e) {
return new l(e.level);
}
}
const m = {
MINOR: "Minor accomplishment",
MODERATE: "Moderate accomplishment",
MAJOR: "Major accomplishment"
};
class u {
constructor() {
(this.type = t.HAZARD), (this.hazards = []);
}
getEncounterXpPerPlayer(e = 1, t = null) {
let n = 0;
for (let t of this.hazards) {
let o = t.level - e;
if (o > 4) return null;
o >= -4 && (n += t.amount * c[o.toString()] * (t.isComplex ? 5 : 1));
}
return n;
}
exportToJSON() {
let e = {type: t.HAZARD, hazards: []};
for (let t of this.hazards) e.hazards.push(t.exportToJSON());
return e;
}
static importFromJSON(e) {
let t = new u();
for (let n of e.creatures) t.hazards.push(a.importFromJSON(n));
return t;
}
}
class a {
constructor(e, t, n, o, r = null) {
(this.name = e),
(this.level = null == t ? 0 : t),
(this.isComplex = n),
(this.amount = null == o ? 1 : o),
(this.link = r);
}
exportToJSON() {
return {
name: this.name,
level: this.level,
isComplex: this.isComplex,
amount: this.amount,
link: this.link
};
}
static importFromJSON(e) {
return new a(e.name, e.leadingComments, e.isComplex, e.amount, e.link);
}
}
const c = {
"-4": 2,
"-3": 3,
"-2": 4,
"-1": 6,
0: 8,
1: 12,
2: 16,
3: 24,
4: 32
};
class p {
constructor(e) {
(this.type = t.CUSTOM), (this.xp = e);
}
getEncounterXpPerPlayer(e = null, t = null) {
return this.xp;
}
exportToJSON() {
return {type: this.type, xp: this.xp};
}
static importFromJSON(e) {
return new p(e.xp);
}
}
class h {
constructor(e) {
(this.name = e), (this.id = null), (this.component = null);
}
registerToSession(e) {
do {
this.id = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
} while (e.isIdUsed(this.id));
}
exportToJSON() {
return {
name: this.name,
id: this.id,
component: null == this.component ? null : this.component.exportToJSON()
};
}
static importFromJSON(e) {
let o = new h(e.name);
if (((o.id = e.id), null != e.component))
switch (e.component.type) {
case t.FIGHT:
o.component = n.importFromJSON(e.component);
break;
case t.ACCOMPLISHMENT:
o.component = l.importFromJSON(e.component);
break;
case t.HAZARD:
o.component = u.importFromJSON(e.component);
break;
case t.CUSTOM:
o.component = p.importFromJSON(e.component);
}
return o;
}
}
class d {
constructor(e = "Default", t = null) {
(this.name = e),
(this.id = null != t ? t : d.getIdFriendlyName(e)),
(this.elements = []);
}
static getIdFriendlyName(e) {
return (
"encounter-" +
e
.toLowerCase()
.split(/[^a-z0-9]/)
.filter(e => e.length > 0)
.join("-")
);
}
moveElement(e, t) {
let n = this.elements[e];
this.elements.splice(e, 1), this.elements.splice(t, 0, n);
}
exportToJSON() {
let e = {name: this.name, id: this.id, elements: []};
for (let t of this.elements) e.elements.push(t.exportToJSON());
return e;
}
static importFromJSON(e) {
let t = new d(e.name, e.id);
for (let n of e.elements) t.elements.push(h.importFromJSON(n));
return t;
}
}
class S {
constructor(e = "Default", t = {}) {
(this.name = e),
(this.params = Object.assign({autoLevelUp: !1}, t)),
(this.encounters = []);
}
addEncounter(e) {
let t = d.getIdFriendlyName(e);
if (null != this.encounters.find(t => t.name === e)) return null;
if (null != this.encounters.find(e => e.id === t)) {
let e = 0;
for (; null != this.encounters.find(n => n.id === `${t}${e}`); ) e++;
t = `${t}${e}`;
}
let n = new d(e, t);
return this.encounters.push(n), this.saveSession(), n;
}
registerElement(e, t) {
let n = this.encounters.find(t => t.name === e);
return (
null != n && (n.elements.push(t), t.registerToSession(this)),
this.saveSession(),
null != n
);
}
isIdUsed(e) {
for (let t of this.encounters)
for (let n of t.elements) if (n.id === e) return !0;
return !1;
}
moveEncounterIndex(e, t) {
let n = this.encounters[e];
this.encounters.splice(e, 1), this.encounters.splice(t, 0, n);
}
renameEncounter(e, t) {
let n = this.encounters.find(t => t.name === e);
return (
null == this.encounters.find(e => e.name === t) &&
null != n &&
((n.name = t), this.saveSession(), !0)
);
}
removeEncounter(e) {
this.encounters.splice(
this.encounters.findIndex(t => t.id === e.id),
1
),
this.saveSession();
}
saveSession() {
window.localStorage.setItem("session:" + this.name, this.exportToJSON());
}
exportToJSON() {
let e = {params: this.params, name: this.name, encounters: []};
for (let t of this.encounters) e.encounters.push(t.exportToJSON());
return JSON.stringify(e);
}
static importFromJSON(e) {
let t = JSON.parse(e),
n = new S(t.name, t.params);
for (let e of t.encounters) n.encounters.push(d.importFromJSON(e));
return n;
}
static makeSession(e = "Default") {
let t = window.localStorage.getItem("session:" + e);
return null == t ? new S(e) : S.importFromJSON(t);
}
}
(e.Session = S),
(e.Encounter = d),
(e.EncounterElement = h),
(e.FightComponent = n),
(e.Creature = o),
(e.EncounterRating = r),
(e.AccomplishmentLevel = m),
(e.ComponentType = t),
(e.ComponentTypeName = {
fight_component: "Fight",
accomplishment_component: "Achievement",
hazard_component: "Hazard",
custom_component: "Custom"
}),
Object.defineProperty(e, "__esModule", {value: !0});
});
