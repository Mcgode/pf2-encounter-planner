!(function(e, t) {
"object" == typeof exports && "undefined" != typeof module
? t(exports)
: "function" == typeof define && define.amd
? define(["exports"], t)
: t((e.PF2EncounterPlanner = {}));
})(this, function(e) {
"use strict";
class t {
constructor(e = "Default", n = null) {
(this.name = e),
(this.id = null != n ? n : t.getIdFriendlyName(e)),
(this.elements = []);
}
static getIdFriendlyName(e) {
return (
"encounter-" +
e
.toLowerCase()
.split(/[^a-z0-9]/)
.filter(e => e.length > 0)
.join("-")
);
}
}
class n {
registerToSession(e) {
do {
this.id = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);
} while (e.isIdUsed(this.id));
}
}
const r = {
TRIVIAL: "trivial",
LOW: "low",
MODERATE: "moderate",
SEVERE: "severe",
EXTREME: "extreme",
IMPOSSIBLE: "impossible"
},
s = {
"-4": 10,
"-3": 15,
"-2": 20,
"-1": 30,
0: 40,
1: 60,
2: 80,
3: 120,
4: 160
},
i = {trivial: 40, low: 60, moderate: 80, severe: 120, extreme: 160};
(e.Session = class {
constructor(e = "Default", t = {}) {
(this.name = e),
(this.params = Object.assign({autoLevelUp: !1}, t)),
(this.encounters = []);
}
addEncounter(e) {
let n = t.getIdFriendlyName(e);
if (null != this.encounters.find(t => t.name === e)) return null;
if (null != this.encounters.find(e => e.id === n)) {
let e = 0;
for (; null != this.encounters.find(t => t.id === `${n}${e}`); ) e++;
n = `${n}${e}`;
}
let r = new t(e, n);
return this.encounters.push(r), r;
}
registerElement(e, t) {
let n = this.encounters.find(t => t.name === e);
return null != n && (n.elements.push(t), t.registerToSession(this)), null != n;
}
isIdUsed(e) {
for (let t of this.encounters)
for (let n of t.elements) if (n.id === e) return !0;
return !1;
}
moveEncounterIndex(e, t) {
let n = this.encounters[e];
this.encounters.splice(e, 1), this.encounters.splice(t, 0, n);
}
}),
(e.Encounter = t),
(e.EncounterElement = n),
(e.FightElement = class extends n {
constructor() {
super(), (this.creatures = []);
}
getEncounterXpPerPlayer(e = 1, t = 4) {
let n = 0;
for (let t of this.creatures) {
let i = t.level - e;
if (i > 4) return r.IMPOSSIBLE;
i >= -4 && (n += t.amount * s[i.toString()]);
}
return (n *= t / 4), n;
}
getEncounterRating(e = 1, t = 4) {
let n = this.getEncounterXpPerPlayer(e, t),
s = 200,
l = null;
for (let e in i) s > i[e] && i[e] >= n && ((l = e), (s = i[e]));
return null == l ? r.IMPOSSIBLE : l;
}
}),
(e.Creature = class {
constructor(e, t, n, r = null) {
(this.name = e),
(this.level = null == t ? 0 : t),
(this.amount = null == n ? 1 : n),
(this.link = r);
}
}),
(e.EncounterRating = r),
Object.defineProperty(e, "__esModule", {value: !0});
});
